#!/usr/bin/env python3

import argparse
import yaml
import cProfile
import pstats
from datetime import datetime
from pyinstrument import Profiler

from pyrate.core.Job import Job

parser = argparse.ArgumentParser(description="Command line options for pyrate")

# -------------------------------------------------------------------
# A single job is identified by just one job configuration file.
# Several of these can be passed to this script using the -j flag.
# This means that the system will launch several jobs in sequence.
# One job corresponds locally to a single instance of a Run.
# -------------------------------------------------------------------
parser.add_argument(
    "--job_config",
    "-j",
    help="job configuration file/s",
    nargs="+",
    required=True,
)

parser.add_argument(
    "--logging_level",
    "-l",
    help="logging level",
    required=False,
)

parser.add_argument(
    "--no_progress_bar",
    "-b",
    help="don't display progressbar",
    required=False,
    default=False,
    action="store_true",
)

parser.add_argument(
    "--timing",
    "-t",
    help="Profiles the all the jobs in pyrate. Output to screen with argument 'print'.",
    required=False,
    default=False,  # If not passed in
    action="store", # store internally
    nargs="?",      # allows for some args or None
    const=True      # if -t there but no string pass in True
)

parser.add_argument(
    "--alg_timing",
    "-a",
    help="Print out to a log file the average timing for algs in config",
    required=False,
    default=False,
    action="store",
    nargs="?",
    const=True
)

args = parser.parse_args()

from code import interact

if __name__ == "__main__":
    for j_file in args.job_config:

        j_name = j_file.split("/")[-1].split(".")[0]

        j_config = yaml.full_load(open(j_file, "r"))

        j_config.update({"no_progress_bar": args.no_progress_bar})

        j_config.update({"alg_timing": args.alg_timing})

        j_log = args.logging_level

        job = Job(j_name, j_config, j_log)

        if args.timing:
            with cProfile.Profile() as pr:
                job.setup()
                job.launch()
            time_stats = pstats.Stats(pr)
            time_stats.sort_stats(pstats.SortKey.TIME)
            # printing would be insane don't do that 
            if type(args.timing) == str and (args.timing.lower() == "print"):
                time_stats.print_stats()

            # Save the profiling to file
            time_stats.dump_stats(filename=f"{j_name}{datetime.now():.%Y-%m-%d-%Hh%M}.prof")

            # profiler = Profiler()
            # profiler.start()
            # job.setup()
            # job.launch()
            # profiler.stop()
            # profiler.print()

        else:
            job.setup()
            job.launch()

# EOF
